2024-04-02 04:14:29.241732	root[root] @ localhost [::1]	10	1	Query	WITH SeatNumberCTE_Modified AS (\    SELECT /* ++A20538828 ++HW4 */\        GroupNo, CONCAT(LPAD(GroupNo, 2, '0'), '1') AS SeatNumber, StudentID1 AS Temp_StudentID\    FROM self_formed_group\    UNION ALL\    SELECT GroupNo, CONCAT(LPAD(GroupNo, 2, '0'), '2') AS SeatNumber, StudentID2 AS Temp_StudentID\    FROM self_formed_group\    UNION ALL\    SELECT  GroupNo, CONCAT(LPAD(GroupNo, 2, '0'), '3') AS SeatNumber, StudentID3 AS Temp_StudentID\    FROM self_formed_group\),\temp_result_Modified AS (\    SELECT SeatNumberCTE_Modified.GroupNo,SeatNumberCTE_Modified.SeatNumber,\        CASE \            WHEN cr.StudentID IS NULL THEN NULL\            ELSE SeatNumberCTE_Modified.Temp_StudentID\        END AS StudentID, cr.firstname, cr.lastname, cr.email\    FROM SeatNumberCTE_Modified\    LEFT JOIN class_roster cr ON SeatNumberCTE_Modified.Temp_StudentID = cr.StudentID\),\StudentAllocations_Modified AS (\    SELECT cr.studentid, ROW_NUMBER() OVER (ORDER BY RAND()) AS AllocationID\    FROM class_roster cr\    LEFT JOIN\        (\            SELECT GroupNo, StudentID1 AS StudentID\            FROM self_formed_group\            UNION ALL\            SELECT GroupNo, StudentID2 AS StudentID\            FROM self_formed_group\            UNION ALL\            SELECT GroupNo, StudentID3 AS StudentID\            FROM self_formed_group\        ) sfg ON cr.studentid = sfg.StudentID\    WHERE sfg.GroupNo IS NULL\),\SeatAllocation_Modified AS (\    SELECT subquery.GroupNo, subquery.SeatNumber,\        CASE \            WHEN subquery.RowNumber > 1 THEN NULL\            ELSE subquery.StudentID \        END AS StudentID,\        ROW_NUMBER() OVER (ORDER BY subquery.StudentID) AS AllocationID\    FROM (\        SELECT GroupNo, SeatNumber, StudentID, ROW_NUMBER() OVER (PARTITION BY StudentID ORDER BY GroupNo) AS RowNumber\        FROM temp_result_Modified\    ) AS subquery\)\\SELECT s1.GroupNo, s1.SeatNumber, COALESCE(s1.StudentID, s2.studentid) AS StudentID, s1.AllocationID,\    CASE\        WHEN s1.StudentID IS NOT NULL THEN 'self'\        ELSE 'random'\    END AS TYPE, cr.firstname, cr.lastname, cr.email\FROM SeatAllocation_Modified s1\LEFT JOIN StudentAllocations_Modified s2 ON s1.AllocationID = s2.AllocationID\LEFT JOIN class_roster cr ON COALESCE(s1.StudentID, s2.studentid) = cr.studentid2024-04-02 03:33:47.251809	root[root] @ localhost [::1]	10	1	Query	WITH StudentAllocations_Modified AS (\    SELECT cr.studentid, ROW_NUMBER() OVER (ORDER BY RAND()) AS AllocationID\    FROM class_roster cr\    LEFT JOIN\        (\            SELECT GroupNo, StudentID1 AS StudentID\            FROM self_formed_group\            UNION ALL\            SELECT GroupNo, StudentID2 AS StudentID\            FROM self_formed_group\            UNION ALL\            SELECT GroupNo, StudentID3 AS StudentID\            FROM self_formed_group\        ) sfg ON cr.studentid = sfg.StudentID\    WHERE sfg.GroupNo IS NULL\),\\SeatAllocation_Modified AS (\    SELECT subquery.GroupNo, subquery.SeatNumber,\        CASE \            WHEN subquery.RowNumber > 1 THEN NULL\            ELSE subquery.StudentID \        END AS Modified_StudentID,\        ROW_NUMBER() OVER (ORDER BY subquery.StudentID) AS AllocationID\    FROM (\        SELECT GroupNo, SeatNumber, StudentID,\            ROW_NUMBER() OVER (PARTITION BY StudentID ORDER BY GroupNo) AS RowNumber\        FROM temp_result\    ) AS subquery\)\\SELECT /* ++A20538828 ++HW4 */ \	s1.GroupNo, s1.SeatNumber, COALESCE(s1.Modified_StudentID, s2.studentid) AS StudentID, s1.AllocationID\FROM SeatAllocation_Modified s1\LEFT JOIN StudentAllocations_Modified s2 ON s1.AllocationID = s2.AllocationID2024-04-02 02:58:33.546502	root[root] @ localhost [::1]	10	1	Query	WITH StudentAllocations AS (\    SELECT   /* ++A20538828 ++HW4 */\        cr.studentid, ROW_NUMBER() OVER (ORDER BY RAND()) AS AllocationID\    FROM class_roster cr\    LEFT JOIN\        (\            SELECT GroupNo, StudentID1 AS StudentID\            FROM self_formed_group\            UNION ALL\            SELECT GroupNo, StudentID2 AS StudentID\            FROM self_formed_group\            UNION ALL\            SELECT GroupNo, StudentID3 AS StudentID\            FROM self_formed_group\        ) sfg ON cr.studentid = sfg.StudentID\    WHERE sfg.GroupNo IS NULL\)\\SELECT * FROM StudentAllocations2024-04-02 01:45:22.154283	root[root] @ localhost [::1]	10	1	Query	SELECT /* ++A20538828 ++HW4 */\    GroupNo, SeatNumber,StudentID,\    ROW_NUMBER() OVER (PARTITION BY StudentID ORDER BY GroupNo) AS Modified_RowNumber\FROM temp_result LIMIT 0, 10002024-04-02 01:33:17.762185	root[root] @ localhost [::1]	10	1	Query	SELECT /* ++A20538828 ++HW4 */ * FROM temp_result LIMIT 0, 10002024-04-02 01:33:04.189872	root[root] @ localhost [::1]	10	1	Query	select  /* ++A20538828 ++HW4 */	\	Invalid_StudentID\FROM(\	Select StudentID1 as Invalid_StudentID From self_formed_group\	union \	SELECT StudentID2 AS Invalid_StudentID FROM self_formed_group\	union\	SELECT StudentID3 AS Invalid_StudentID FROM self_formed_group\) as all_invalid_students\LEFT JOIN class_roster ON all_invalid_students.Invalid_StudentID = class_roster.StudentID\where class_roster.StudentID is null LIMIT 0, 10002024-04-02 01:12:49.741940	root[root] @ localhost [::1]	10	1	Query	SELECT  /* ++A20538828 ++HW4 */\	StudentID, COUNT(StudentID) AS StudentCount\FROM (\    SELECT StudentID1 AS StudentID\    FROM self_formed_group\    UNION ALL \    SELECT StudentID2 AS StudentID\    FROM self_formed_group\    UNION ALL\    SELECT StudentID3 AS StudentID\    FROM self_formed_group\    \) AS AllStudents\GROUP BY StudentID\HAVING COUNT(StudentID) > 1 LIMIT 0, 1000